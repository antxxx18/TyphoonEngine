Texture2D shaderTexture : register(t0);
Texture2D depthMapTexture : register(t1);
Texture2D depthMapTexture2 : register(t2);

SamplerState SampleTypeClamp : register(s0);
SamplerState SampleTypeWrap  : register(s1);

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float4 ambientColor2;
	float4 diffuseColor2;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
    float4 lightViewPosition : TEXCOORD1;
	float3 lightPos : TEXCOORD2;
    float4 lightViewPosition2 : TEXCOORD3;
	float3 lightPos2 : TEXCOORD4;
};

float4 PS(PixelInputType input) : SV_TARGET
{
	float2 projectTexCoord;
	float depthValue;
	float lightDepthValue;
    float lightIntensity;
	float4 textureColor;
	
	// Установка значения смещения используемого для устранения проблем точности с плавающей запятой
	float bias = 0.001f;

    float4 color = ambientColor;
	
	// Вычисление координат проецирования текстуры
	projectTexCoord.x =  input.lightViewPosition.x / input.lightViewPosition.w / 2.0f + 0.5f;
	projectTexCoord.y = -input.lightViewPosition.y / input.lightViewPosition.w / 2.0f + 0.5f;

	// Находится ли спроецированные координаты в пределах 0 и 1. Если да, то пиксель находится в видимости света
	if((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y))
	{
		depthValue = depthMapTexture.Sample(SampleTypeClamp, projectTexCoord).r;

		// Вычисление глубины света
		lightDepthValue = input.lightViewPosition.z / input.lightViewPosition.w;

		// Вычитание смещения из lightDepthValue
		lightDepthValue = lightDepthValue - bias;

		// Сравнение глубины теневой карты и глубины света, для определения того, освещен или затенен пиксель
		// Если свет перед объектом, то пиксель освещен; если нет, то пиксель затенен и объект бросает тень за ним
		if(lightDepthValue < depthValue)
		{
		    // Вычисление количества света в пикселе
			lightIntensity = saturate(dot(input.normal, input.lightPos));
		    if(lightIntensity > 0.0f)
			{
				// Определение заключительного рассеяного (diffuse) света на основе рассеяного цвети и интенсивности света
				color += (diffuseColor * lightIntensity);
			}
		}
	}
	
	// Второй источник света
	
	float4 color2 = ambientColor2;

	projectTexCoord.x =  input.lightViewPosition2.x / input.lightViewPosition2.w / 2.0f + 0.5f;
	projectTexCoord.y = -input.lightViewPosition2.y / input.lightViewPosition2.w / 2.0f + 0.5f;

	if((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y))
	{
		depthValue = depthMapTexture2.Sample(SampleTypeClamp, projectTexCoord).r;

		lightDepthValue = input.lightViewPosition2.z / input.lightViewPosition2.w;
		lightDepthValue = lightDepthValue - bias;

		if(lightDepthValue < depthValue)
		{
			lightIntensity = saturate(dot(input.normal, input.lightPos2));
		    if(lightIntensity > 0.0f)
			{
				color2 += (diffuseColor2 * lightIntensity);
			}
		}
	}
	
	color = saturate(color);
	color2 = saturate(color2);	
		
	textureColor = shaderTexture.Sample(SampleTypeWrap, input.tex);

	// смешиваем оба источника света с текстурой
	return saturate(color * color2 * textureColor);
}